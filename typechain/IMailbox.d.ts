/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IMailboxInterface extends ethers.utils.Interface {
  functions: {
    "defaultHook()": FunctionFragment;
    "defaultIsm()": FunctionFragment;
    "delivered(bytes32)": FunctionFragment;
    "dispatch(uint32,bytes32,bytes,bytes,address)": FunctionFragment;
    "latestDispatchedId()": FunctionFragment;
    "localDomain()": FunctionFragment;
    "process(bytes,bytes)": FunctionFragment;
    "quoteDispatch(uint32,bytes32,bytes,bytes,address)": FunctionFragment;
    "recipientIsm(address)": FunctionFragment;
    "requiredHook()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "defaultHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultIsm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delivered",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestDispatchedId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "process",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteDispatch",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientIsm",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredHook",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "defaultIsm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delivered", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dispatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestDispatchedId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteDispatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientIsm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredHook",
    data: BytesLike
  ): Result;

  events: {
    "Dispatch(address,uint32,bytes32,bytes)": EventFragment;
    "DispatchId(bytes32)": EventFragment;
    "Process(uint32,bytes32,address)": EventFragment;
    "ProcessId(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dispatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DispatchId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Process"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessId"): EventFragment;
}

export type DispatchEvent = TypedEvent<
  [string, number, string, string] & {
    sender: string;
    destination: number;
    recipient: string;
    message: string;
  }
>;

export type DispatchIdEvent = TypedEvent<[string] & { messageId: string }>;

export type ProcessEvent = TypedEvent<
  [number, string, string] & {
    origin: number;
    sender: string;
    recipient: string;
  }
>;

export type ProcessIdEvent = TypedEvent<[string] & { messageId: string }>;

export class IMailbox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMailboxInterface;

  functions: {
    defaultHook(overrides?: CallOverrides): Promise<[string]>;

    defaultIsm(overrides?: CallOverrides): Promise<[string]>;

    delivered(
      messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "dispatch(uint32,bytes32,bytes,bytes,address)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      body: BytesLike,
      customHookMetadata: BytesLike,
      customHook: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "dispatch(uint32,bytes32,bytes,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      body: BytesLike,
      defaultHookMetadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "dispatch(uint32,bytes32,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestDispatchedId(overrides?: CallOverrides): Promise<[string]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    process(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "quoteDispatch(uint32,bytes32,bytes,bytes,address)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      customHookMetadata: BytesLike,
      customHook: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    "quoteDispatch(uint32,bytes32,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    "quoteDispatch(uint32,bytes32,bytes,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      defaultHookMetadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    recipientIsm(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[string] & { module: string }>;

    requiredHook(overrides?: CallOverrides): Promise<[string]>;
  };

  defaultHook(overrides?: CallOverrides): Promise<string>;

  defaultIsm(overrides?: CallOverrides): Promise<string>;

  delivered(messageId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "dispatch(uint32,bytes32,bytes,bytes,address)"(
    destinationDomain: BigNumberish,
    recipientAddress: BytesLike,
    body: BytesLike,
    customHookMetadata: BytesLike,
    customHook: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "dispatch(uint32,bytes32,bytes,bytes)"(
    destinationDomain: BigNumberish,
    recipientAddress: BytesLike,
    body: BytesLike,
    defaultHookMetadata: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "dispatch(uint32,bytes32,bytes)"(
    destinationDomain: BigNumberish,
    recipientAddress: BytesLike,
    messageBody: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestDispatchedId(overrides?: CallOverrides): Promise<string>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  process(
    metadata: BytesLike,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "quoteDispatch(uint32,bytes32,bytes,bytes,address)"(
    destinationDomain: BigNumberish,
    recipientAddress: BytesLike,
    messageBody: BytesLike,
    customHookMetadata: BytesLike,
    customHook: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quoteDispatch(uint32,bytes32,bytes)"(
    destinationDomain: BigNumberish,
    recipientAddress: BytesLike,
    messageBody: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quoteDispatch(uint32,bytes32,bytes,bytes)"(
    destinationDomain: BigNumberish,
    recipientAddress: BytesLike,
    messageBody: BytesLike,
    defaultHookMetadata: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recipientIsm(recipient: string, overrides?: CallOverrides): Promise<string>;

  requiredHook(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    defaultHook(overrides?: CallOverrides): Promise<string>;

    defaultIsm(overrides?: CallOverrides): Promise<string>;

    delivered(
      messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "dispatch(uint32,bytes32,bytes,bytes,address)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      body: BytesLike,
      customHookMetadata: BytesLike,
      customHook: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "dispatch(uint32,bytes32,bytes,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      body: BytesLike,
      defaultHookMetadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "dispatch(uint32,bytes32,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    latestDispatchedId(overrides?: CallOverrides): Promise<string>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    process(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "quoteDispatch(uint32,bytes32,bytes,bytes,address)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      customHookMetadata: BytesLike,
      customHook: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteDispatch(uint32,bytes32,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteDispatch(uint32,bytes32,bytes,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      defaultHookMetadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recipientIsm(recipient: string, overrides?: CallOverrides): Promise<string>;

    requiredHook(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Dispatch(address,uint32,bytes32,bytes)"(
      sender?: string | null,
      destination?: BigNumberish | null,
      recipient?: BytesLike | null,
      message?: null
    ): TypedEventFilter<
      [string, number, string, string],
      {
        sender: string;
        destination: number;
        recipient: string;
        message: string;
      }
    >;

    Dispatch(
      sender?: string | null,
      destination?: BigNumberish | null,
      recipient?: BytesLike | null,
      message?: null
    ): TypedEventFilter<
      [string, number, string, string],
      {
        sender: string;
        destination: number;
        recipient: string;
        message: string;
      }
    >;

    "DispatchId(bytes32)"(
      messageId?: BytesLike | null
    ): TypedEventFilter<[string], { messageId: string }>;

    DispatchId(
      messageId?: BytesLike | null
    ): TypedEventFilter<[string], { messageId: string }>;

    "Process(uint32,bytes32,address)"(
      origin?: BigNumberish | null,
      sender?: BytesLike | null,
      recipient?: string | null
    ): TypedEventFilter<
      [number, string, string],
      { origin: number; sender: string; recipient: string }
    >;

    Process(
      origin?: BigNumberish | null,
      sender?: BytesLike | null,
      recipient?: string | null
    ): TypedEventFilter<
      [number, string, string],
      { origin: number; sender: string; recipient: string }
    >;

    "ProcessId(bytes32)"(
      messageId?: BytesLike | null
    ): TypedEventFilter<[string], { messageId: string }>;

    ProcessId(
      messageId?: BytesLike | null
    ): TypedEventFilter<[string], { messageId: string }>;
  };

  estimateGas: {
    defaultHook(overrides?: CallOverrides): Promise<BigNumber>;

    defaultIsm(overrides?: CallOverrides): Promise<BigNumber>;

    delivered(
      messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dispatch(uint32,bytes32,bytes,bytes,address)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      body: BytesLike,
      customHookMetadata: BytesLike,
      customHook: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "dispatch(uint32,bytes32,bytes,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      body: BytesLike,
      defaultHookMetadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "dispatch(uint32,bytes32,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestDispatchedId(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    process(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "quoteDispatch(uint32,bytes32,bytes,bytes,address)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      customHookMetadata: BytesLike,
      customHook: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteDispatch(uint32,bytes32,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteDispatch(uint32,bytes32,bytes,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      defaultHookMetadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recipientIsm(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requiredHook(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    defaultHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultIsm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delivered(
      messageId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dispatch(uint32,bytes32,bytes,bytes,address)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      body: BytesLike,
      customHookMetadata: BytesLike,
      customHook: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "dispatch(uint32,bytes32,bytes,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      body: BytesLike,
      defaultHookMetadata: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "dispatch(uint32,bytes32,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestDispatchedId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    process(
      metadata: BytesLike,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "quoteDispatch(uint32,bytes32,bytes,bytes,address)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      customHookMetadata: BytesLike,
      customHook: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteDispatch(uint32,bytes32,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteDispatch(uint32,bytes32,bytes,bytes)"(
      destinationDomain: BigNumberish,
      recipientAddress: BytesLike,
      messageBody: BytesLike,
      defaultHookMetadata: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recipientIsm(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requiredHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
