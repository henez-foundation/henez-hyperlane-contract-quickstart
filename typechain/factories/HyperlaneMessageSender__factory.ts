/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HyperlaneMessageSender,
  HyperlaneMessageSenderInterface,
} from "../HyperlaneMessageSender";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_outbox",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "destinationDomain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "recipient",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "SentMessage",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_destinationDomain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_recipient",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "sendString",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60803461007457601f61028338819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b0319169190911790556040516101f390816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c63aafa0a871461002a57600080fd5b346101985760603660031901126101985760043563ffffffff8116809103610194576044359160243591906001600160401b039081851161019057366023860112156101905784600401359180831161018c576024860195602484369201011161018c57865463fa31de0160e01b835260048301859052602483018690526060604484015260209083906001600160a01b0316818a816100ce606482018a8e61019c565b03925af1801561018157610129575b50507f10875372a03b7e5c7d46deb548b112c09c576e378c8f2daa3370a5cbe58c41b693610123916040519485948552602085015260606040850152606084019161019c565b0390a180f35b6020903d602011610179575b601f8201601f1916830190811183821017610165579060209291604052810103126101615738806100dd565b8480fd5b634e487b7160e01b88526041600452602488fd5b3d9150610135565b6040513d89823e3d90fd5b8680fd5b8580fd5b8280fd5b5080fd5b908060209392818452848401376000828201840152601f01601f191601019056fea264697066735822122056c03814002ce5739f55046ab2b5bea8a893ae9d8f16726aa621129dcf0312c464736f6c63430008180033";

export class HyperlaneMessageSender__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _outbox: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HyperlaneMessageSender> {
    return super.deploy(
      _outbox,
      overrides || {}
    ) as Promise<HyperlaneMessageSender>;
  }
  getDeployTransaction(
    _outbox: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_outbox, overrides || {});
  }
  attach(address: string): HyperlaneMessageSender {
    return super.attach(address) as HyperlaneMessageSender;
  }
  connect(signer: Signer): HyperlaneMessageSender__factory {
    return super.connect(signer) as HyperlaneMessageSender__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HyperlaneMessageSenderInterface {
    return new utils.Interface(_abi) as HyperlaneMessageSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HyperlaneMessageSender {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as HyperlaneMessageSender;
  }
}
