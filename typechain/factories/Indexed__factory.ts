/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Indexed, IndexedInterface } from "../Indexed";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "deployedBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a08060405234610021574360805260989081610027823960805181603b0152f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c6382ea7bfe14602857600080fd5b34605e5781600319360112605e576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fdfea2646970667358221220001e520fb5fca8f023688edcfe03eaa412c1d1126e3aeb98d5a76cb04c8ecff564736f6c63430008180033";

export class Indexed__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Indexed> {
    return super.deploy(overrides || {}) as Promise<Indexed>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Indexed {
    return super.attach(address) as Indexed;
  }
  connect(signer: Signer): Indexed__factory {
    return super.connect(signer) as Indexed__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IndexedInterface {
    return new utils.Interface(_abi) as IndexedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Indexed {
    return new Contract(address, _abi, signerOrProvider) as Indexed;
  }
}
