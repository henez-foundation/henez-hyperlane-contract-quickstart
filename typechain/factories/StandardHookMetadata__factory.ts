/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StandardHookMetadata,
  StandardHookMetadataInterface,
} from "../StandardHookMetadata";

const _abi = [
  {
    inputs: [],
    name: "VARIANT",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346018576075908161001e823930815050f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c632641895314602657600080fd5b6000366003190112603a5780600160209252f35b600080fdfea2646970667358221220d3d73023b31854b8078dbe5758cf0786b666ec040014d9f6c1d9fb9ed75e5cda64736f6c63430008180033";

export class StandardHookMetadata__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StandardHookMetadata> {
    return super.deploy(overrides || {}) as Promise<StandardHookMetadata>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StandardHookMetadata {
    return super.attach(address) as StandardHookMetadata;
  }
  connect(signer: Signer): StandardHookMetadata__factory {
    return super.connect(signer) as StandardHookMetadata__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StandardHookMetadataInterface {
    return new utils.Interface(_abi) as StandardHookMetadataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StandardHookMetadata {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StandardHookMetadata;
  }
}
