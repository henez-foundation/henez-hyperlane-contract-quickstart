/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestPostDispatchHook,
  TestPostDispatchHookInterface,
} from "../TestPostDispatchHook";

const _abi = [
  {
    inputs: [],
    name: "fee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hookType",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
    ],
    name: "messageDispatched",
    outputs: [
      {
        internalType: "bool",
        name: "dispatched",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "metadata",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "postDispatch",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "metadata",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "quoteDispatch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
    ],
    name: "setFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "supportsMetadata",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001a576000805561028e90816100208239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908163086011b9146101535750806369fe0e2d1461013a578063aaccd2301461011b578063ddca3f43146100fe578063e445e7dd146100df578063e5320bb91461009f5763f667ee911461007057600080fd5b3461009b57602036600319011261009b578160209360ff923581526001855220541690519015158152f35b8280fd5b5091346100dc5760203660031901126100dc578235906001600160401b0382116100dc57506020926100d3913691016101dc565b50505160018152f35b80fd5b5050346100fa57816003193601126100fa5751908152602090f35b5080fd5b5050346100fa57816003193601126100fa57602091549051908152f35b5050346100fa5760209161012e3661020e565b50505050549051908152f35b8382346100fa5760203660031901126100fa5735815580f35b905061015e3661020e565b949092506001600160401b0391508185116101c957601f8501601f19908116603f01168401918211848310176101c9575090859185528383526020830193368183011161009b5780602092863783010152519020825260016020528120600160ff1982541617905580f35b634e487b7160e01b875260419052602486fd5b9181601f84011215610209578235916001600160401b038311610209576020838186019501011161020957565b600080fd5b6040600319820112610209576001600160401b0391600435838111610209578261023a916004016101dc565b9390939260243591821161020957610254916004016101dc565b909156fea26469706673582212201d50ced62a703ade59c53ef971bdfa957c12ee5564920d40bf5cfc4506e9bc8264736f6c63430008180033";

export class TestPostDispatchHook__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestPostDispatchHook> {
    return super.deploy(overrides || {}) as Promise<TestPostDispatchHook>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestPostDispatchHook {
    return super.attach(address) as TestPostDispatchHook;
  }
  connect(signer: Signer): TestPostDispatchHook__factory {
    return super.connect(signer) as TestPostDispatchHook__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPostDispatchHookInterface {
    return new utils.Interface(_abi) as TestPostDispatchHookInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPostDispatchHook {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestPostDispatchHook;
  }
}
