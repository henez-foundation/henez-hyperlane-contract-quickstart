/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Versioned, VersionedInterface } from "../Versioned";

const _abi = [
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346014576079908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63ffa1ad7414602857600080fd5b34603f5781600319360112603f5780600360209252f35b5080fdfea264697066735822122079d97756449198be49d69e002e5ab7dcdb352e0057e0b6855bd39b67b59a5c4964736f6c63430008180033";

export class Versioned__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Versioned> {
    return super.deploy(overrides || {}) as Promise<Versioned>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Versioned {
    return super.attach(address) as Versioned;
  }
  connect(signer: Signer): Versioned__factory {
    return super.connect(signer) as Versioned__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VersionedInterface {
    return new utils.Interface(_abi) as VersionedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Versioned {
    return new Contract(address, _abi, signerOrProvider) as Versioned;
  }
}
