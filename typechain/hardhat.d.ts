/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AbstractPostDispatchHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AbstractPostDispatchHook__factory>;
    getContractFactory(
      name: "StandardHookMetadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardHookMetadata__factory>;
    getContractFactory(
      name: "IPostDispatchHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPostDispatchHook__factory>;
    getContractFactory(
      name: "IInterchainSecurityModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterchainSecurityModule__factory>;
    getContractFactory(
      name: "ISpecifiesInterchainSecurityModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISpecifiesInterchainSecurityModule__factory>;
    getContractFactory(
      name: "IMailbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMailbox__factory>;
    getContractFactory(
      name: "IMessageRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageRecipient__factory>;
    getContractFactory(
      name: "Indexed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Indexed__factory>;
    getContractFactory(
      name: "Mailbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mailbox__factory>;
    getContractFactory(
      name: "MockMailbox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockMailbox__factory>;
    getContractFactory(
      name: "TestIsm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestIsm__factory>;
    getContractFactory(
      name: "TestPostDispatchHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPostDispatchHook__factory>;
    getContractFactory(
      name: "TestRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRecipient__factory>;
    getContractFactory(
      name: "Versioned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Versioned__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "CrosschainMessager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrosschainMessager__factory>;

    getContractAt(
      name: "AbstractPostDispatchHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AbstractPostDispatchHook>;
    getContractAt(
      name: "StandardHookMetadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardHookMetadata>;
    getContractAt(
      name: "IPostDispatchHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPostDispatchHook>;
    getContractAt(
      name: "IInterchainSecurityModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterchainSecurityModule>;
    getContractAt(
      name: "ISpecifiesInterchainSecurityModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISpecifiesInterchainSecurityModule>;
    getContractAt(
      name: "IMailbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMailbox>;
    getContractAt(
      name: "IMessageRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageRecipient>;
    getContractAt(
      name: "Indexed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Indexed>;
    getContractAt(
      name: "Mailbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mailbox>;
    getContractAt(
      name: "MockMailbox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockMailbox>;
    getContractAt(
      name: "TestIsm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestIsm>;
    getContractAt(
      name: "TestPostDispatchHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPostDispatchHook>;
    getContractAt(
      name: "TestRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRecipient>;
    getContractAt(
      name: "Versioned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Versioned>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "CrosschainMessager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrosschainMessager>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
